generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  role      String   @default("customer")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client    Client?
}

model Client {
  id             Int             @id @default(autoincrement())
  name           String
  bio            String?
  slug           String          @unique
  clientTypeId   Int
  userId         Int             @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  appointments   Appointment[]
  auditLogs      AuditLog[]
  availability   Availability[]
  clientType     ClientType      @relation(fields: [clientTypeId], references: [id])
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientServices ClientService[]
}

model ClientType {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  clients     Client[]
}

model Customer {
  id           Int           @id @default(autoincrement())
  name         String
  email        String
  phone        String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
}

model Service {
  id             Int             @id @default(autoincrement())
  name           String
  description    String?
  duration       Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  price          String          @default("0.00")
  clientServices ClientService[]
}

model ClientService {
  id           Int           @id @default(autoincrement())
  clientId     Int
  serviceId    Int
  price        String
  active       Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  client       Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  service      Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([clientId, serviceId])
}

model Appointment {
  id              Int            @id @default(autoincrement())
  date            DateTime
  time            String
  status          String         @default("scheduled")
  clientId        Int
  customerId      Int
  clientServiceId Int?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  client          Client         @relation(fields: [clientId], references: [id])
  clientService   ClientService? @relation(fields: [clientServiceId], references: [id])
  customer        Customer       @relation(fields: [customerId], references: [id])
}

model Availability {
  id        Int      @id @default(autoincrement())
  clientId  Int
  date      DateTime
  time      String
  createdAt DateTime @default(now())
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([clientId, date, time])
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  clientId   Int
  action     String
  details    String?
  actionDate DateTime @default(now())
  ipAddress  String?
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}
